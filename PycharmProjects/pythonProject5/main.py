# 这是一个示例 Python 脚本。

# 按 Shift+F10 执行或将其替换为您的代码。
# 按 双击 Shift 在所有地方搜索类、文件、工具窗口、操作和设置。


def print_hi():
    # 在下面的代码行中使用断点来调试脚本。
    name = input("请输入姓名")
    r = eval(input("请输入一个有效的表达式"))
    s = "Hello world"
    s1 = s[2:5]
    print(f'Hi, {name},{r},{s},{s1}')  # 按 Ctrl+F8 切换断点.


def test():
    s2 = [1, 2, 3, 4, 5]
    s2[0] = [1, 2]
    print(f'Hi, {s2}')
    s2[0:3] = ['霍大师', '天天打呼噜']
    print(f'Hi, {s2}')
    s2[0:3] = []
    print(f'Hi, {s2}')
    t=(1,2,5,"true",[3.1,0.2],5.3)
    print(t)
    print(t[0:2])
    b=set('hello')
    print(b)
    s1='%s成绩不是很理想，只有%d分，需要提高%d分'%('小明',60,40)
    print(s1)
    i1,i2=10,3
    print(i1/i2,i1**i2,i1//i2)
    # score=eval(input("请输入成绩："))
    # if score<60:
    #     print('不及格等死吧老弟')
    # elif score==61:
    #     print('给你小子混过去了')
    # else:
    #     print('算你小子走运')
    ls=['python','java','c++']
    for l in ls:
        print(l)
    #迭代字典时，l取到的是键
    print(list(range(1,5,2)))
    n=eval(input("请输入一个大于0的整数"))
    sum=0
    for i in range(1,n+1,2):
        sum+=i
    print(sum)

# 使用global关键字可表示访问的是全局变量而不是创建新的局部变量，
# 通过nonlocal关键字可在内层的函数中直接使用外层函数中定义的变量（用于函数嵌套的情况）
# 可使用@demo放在具体函数上方表示demo是其装饰器,书写demo的内联函数时，其函数参数表使得demo能装饰的函数数量必须与其一致（大致起到模板的作用）

import sys
# from 模块名 import * 表示导入模块中的全部标识符，即是模块中的__all__，若无指定则是所有，用as可给导入的模块或标识符起别名

# 按装订区域中的绿色按钮以运行脚本。
if __name__ == '__main__':
    # print_hi('PyCharm')
    test()
    # n=int(sys.argv[1])可获取执行脚本文件时传递的参数（命令行执行文件时用到）
    # test1()
# 元组中元素不可修改，用（）包裹
# 列表元素可以修改，用[]包裹
# set的元素不可重复且必须为可哈希对象（如字符串），用{}包裹，
# 集合中元素不能够通过下标访问，主要进行运算
# {}用于创建空字典，只能用set创建空集合
# 字典是无序的对象集合，键必须是唯一的，键必须是可哈希数据（不能是列表、元组、集合），可用dict（）函数创建空字典
# 访问字典元素要通过键访问，示例：字典对象['键']
# is为身份运算符，用于判断存储单元是否相同
# in为成员运算符，用于字典判断时实质是判断该数据是否是字典中某个元素的键
# 序列运算符
# pass表示空操作，只起到占位作用，执行时什么都不做，让程序实现渐进式开发
# 算术运算符特例 整除：// 幂运算：**
# 可利用enumerate函数返回索引序列对象同时获得每个元素的索引值
# python中不定长参数有*args（传入的是位置参数封装成的元组）和**args两种（传入的是关键字参数封装成的字典）
# *号和**号在传递的实参中起拆分实参的作用，拆分成位置参数和关键字参数
# type函数可获取返回值类型







# 访问 https://www.jetbrains.com/help/pycharm/ 获取 PyCharm 帮助